from pyomo.environ import *

class ChargeController:

    def compute_actions(number_of_EVs, control_horizon, grid_capacity, current_time, forecast_PV, imp_price, exp_price, ev, prev_soc): #
        
        
        eff = 0.9275

        imp_price = { i : imp_price[i] for i in range(0, len(imp_price) ) }
        impport_price_dictionary = dict()
        for i in range(control_horizon):
          impport_price_dictionary[i] = imp_price[i]


        forecast_PV = { i : forecast_PV[i] for i in range(0, len(forecast_PV) ) }
        PVforecast_dictionary = dict()
        for i in range(control_horizon):
          PVforecast_dictionary[i] = forecast_PV[i]


        exp_price = { i : exp_price[i] for i in range(0, len(exp_price) ) }
        export_price_dictionary = dict()
        for i in range(control_horizon):
          export_price_dictionary[i] = exp_price[i]
          
        charge_powers = dict()
        PV_generation = [0.0] * control_horizon
        
        
        for e in range(number_of_EVs):
            
            
            charge_powers[e] = [0.0] * control_horizon
        
        
        
        
        
        model = ConcreteModel()
        
        #setting indexes for control horizon and number of cars 
        model.iIDX = Set(initialize = range(control_horizon))
        model.eIDX = Set(initialize = range(number_of_EVs))
        
        #defininf model parameters 
        model.grid_price = Param(model.iIDX, initialize=impport_price_dictionary)
        model.sale_price = Param(model.iIDX, initialize = export_price_dictionary) 
        model.forecast_PV = Param(model.iIDX,initialize = PVforecast_dictionary)
        model.EVs = Param(model.eIDX, initialize = ev, within=Any)
        model.Trade_off_coefficient = Param( initialize = 10)
        
        '''
        model.binary_variable = Var(model.iIDX, domain = Binary)
        model.grid_import = Var(model.iIDX, domain=NonNegativeReals)
        model.export = Var(model.iIDX, domain=NonNegativeReals) #kW
        model.PV_used = Var(model.iIDX, domain = NonNegativeReals)
        model.PV_remain = Var(model.iIDX, domain = NonNegativeReals)
        model.priority_index = Var(model.eIDX, domain = Reals)
        model.state_of_charge = Var(model.eIDX, model.iIDX, domain = NonNegativeReals)
        model.EV_charging = Var(model.eIDX, model.iIDX, domain = NonNegativeReals)
        model.positive_difference = Var(model.eIDX, domain = NonNegativeReals)
        model.negative_difference = Var(model.eIDX, domain = NonNegativeReals)
        '''
        #time step 
        Delta_t = 1 
        model.grid_import = Var(model.iIDX, domain=NonNegativeReals)
        model.priority_index = Var(model.eIDX, domain = Reals)
        #Objective function
        def objective_fucntion(model):
            return sum((model.grid_price[i] * model.grid_import[i]) * Delta_t for i in model.iIDX) + model.Trade_off_coefficient * sum(model.priority_index[e] for e in model.eIDX)
        
        #minimize the optimization 
        model.mainobjective = Objective(rule=objective_fucntion, sense=minimize)
        
        model.PV_used = Var(model.iIDX, domain = NonNegativeReals)
        model.export = Var(model.iIDX, domain=NonNegativeReals)
        model.EV_charging = Var(model.eIDX, model.iIDX, domain = NonNegativeReals)
        #Energy balance
        def Character_01(model,i):
            return model.grid_import[i] + model.PV_used[i] == model.export[i] + sum(model.EV_charging[e,i] for e in model.eIDX)
        
        model.Constraint_01 = Constraint(model.iIDX, rule=Character_01)
        
        
        model.binary_variable = Var(model.iIDX, domain = Binary)
        
        #This value is used to make sure that either export or import occurs in one i period 
        def Character_02(model,i):
            return model.grid_import[i] <= model.binary_variable[i]*grid_capacity
        
        model.Constraint_02 = Constraint(model.iIDX, rule = Character_02)
        
        
        
        def Character_03(model,i):
            return model.export[i] <= (1-model.binary_variable[i])*grid_capacity
        
        model.Constraint_03 = Constraint(model.iIDX, rule = Character_03)
        
    
        
        model.Constraint_04 = ConstraintList()
        for e in model.eIDX:
            for i in model.iIDX:
                model.Constraint_04.add(expr = model.EV_charging[e,i] <= model.EVs[e].max_charging_power)
                
        
        
        
        model.PV_remain = Var(model.iIDX, domain = NonNegativeReals)
        def Character_05 (model, i):
            return model.PV_remain[i] == model.forecast_PV[i] - model.PV_used[i]
        
        model.Constraint_05 = Constraint(model.iIDX, rule = Character_05)
        
        
        model.state_of_charge = Var(model.eIDX, model.iIDX, domain = NonNegativeReals)
        
        def Character_06(model, i, e): 
            if i == 0:
                if model.EVs[e].state != 'connected':
                    return model.state_of_charge[e, i] == model.EVs[e].arrival_soc
                else:
                    return model.state_of_charge[e, i] == model.EVs[e].arrival_soc + model.EV_charging[e,i]*eff*Delta_t/model.EVs[e].capacity
            else: 
                if i < model.EVs[e].arrival_time - current_time:
                    return model.state_of_charge[e, i] ==  model.state_of_charge[e, i-1]
                elif i == model.EVs[e].arrival_time - current_time:
                    return model.state_of_charge[e, i] == model.EVs[e].arrival_soc + model.EV_charging[e,i] * eff*Delta_t/ model.EVs[e].capacity
                elif i > model.EVs[e].arrival_time - current_time and i <= model.EVs[e].departure_time - current_time:
                    return model.state_of_charge[e, i] == model.state_of_charge[e, i-1] + model.EV_charging[e,i] *eff *Delta_t / model.EVs[e].capacity
                else: 
                    return model.state_of_charge[e, i] == 0
                
                
            
        model.Constraint_06 = Constraint(model.iIDX, model.eIDX, rule = Character_06)
        model.positive_difference = Var(model.eIDX, domain = NonNegativeReals)
        model.negative_difference = Var(model.eIDX, domain = NonNegativeReals)
        def absolute_departure_difference(model,e):
            if model.EVs[e].departure_time - current_time >= 0:
                return model.state_of_charge[e, model.EVs[e].departure_time - current_time ] - model.EVs[e].departure_soc \
                       == model.positive_difference[e] - model.negative_difference[e]
            else:
                return model.positive_difference[e] + model.negative_difference[e] == 0
        
        model.Constraint_07 = Constraint(model.eIDX, rule = absolute_departure_difference)
        
        
        def penalty_constraint(model,e):
            return model.priority_index[e] == (model.EVs[e].departure_time - model.EVs[e].arrival_time) / model.EVs[e].capacity \
                      * model.EVs[e].price * (model.positive_difference[e] + model.negative_difference[e])
                
        model.Constraint_08 = Constraint(model.eIDX, rule = penalty_constraint)
        
        
        
        solver = SolverFactory("cbc")
        results = solver.solve(model, tee = False)
        
        if (results.solver.status == SolverStatus.ok) and (results.solver.termination_condition == TerminationCondition.optimal):
            pass 
        elif (results.solver.termination_condition == TerminationCondition.infeasible):
            print (">>> INFEASIBLE MODEL dumped to tmp.lp")
            model.write("tmp.lp", io_options={'symbolic_solver_labels': True}) 
            
        else:
            
            print("Solver Status: ",  results.solver.status)
            print (">>> MODEL dumped to strange.lp")
            model.write("strange.lp", io_options={'symbolic_solver_labels': True}) 
        
        

        for i in model.iIDX:
          for e in model.eIDX:
            charge_powers[e][i] = (value(model.EV_charging[e, i]) / value(model.EVs[e].max_charging_power) )
            PV_generation[i] = value(model.PV_used[i])
            

        return charge_powers, PV_generation 
